--
-- Copyright Â© 2012 - 2018 camunda services GmbH and various authors (info@camunda.com)
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--

CREATE TABLE ACT_GE_PROPERTY (
    NAME_  NVARCHAR(64),
    VALUE_ NVARCHAR(300),
    REV_   INT,
    PRIMARY KEY (NAME_)
);

INSERT INTO ACT_GE_PROPERTY
VALUES ('schema.version', 'fox', 1);

INSERT INTO ACT_GE_PROPERTY
VALUES ('schema.history', 'create(fox)', 1);

INSERT INTO ACT_GE_PROPERTY
VALUES ('next.dbid', '1', 1);

INSERT INTO ACT_GE_PROPERTY
VALUES ('deployment.lock', '0', 1);

INSERT INTO ACT_GE_PROPERTY
VALUES ('history.cleanup.job.lock', '0', 1);

INSERT INTO ACT_GE_PROPERTY
VALUES ('startup.lock', '0', 1);

CREATE TABLE ACT_GE_BYTEARRAY (
    ID_                NVARCHAR(64),
    REV_               INT,
    NAME_              NVARCHAR(255),
    DEPLOYMENT_ID_     NVARCHAR(64),
    BYTES_             IMAGE,
    GENERATED_         TINYINT,
    TENANT_ID_         NVARCHAR(64),
    TYPE_              INTEGER,
    CREATE_TIME_       DATETIME2,
    ROOT_PROC_INST_ID_ NVARCHAR(64),
    REMOVAL_TIME_      DATETIME2,
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_RE_DEPLOYMENT (
    ID_          NVARCHAR(64),
    NAME_        NVARCHAR(255),
    DEPLOY_TIME_ DATETIME2,
    SOURCE_      NVARCHAR(255),
    TENANT_ID_   NVARCHAR(64),
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_RU_EXECUTION (
    ID_                NVARCHAR(64),
    REV_               INT,
    ROOT_PROC_INST_ID_ NVARCHAR(64),
    PROC_INST_ID_      NVARCHAR(64),
    BUSINESS_KEY_      NVARCHAR(255),
    PARENT_ID_         NVARCHAR(64),
    PROC_DEF_ID_       NVARCHAR(64),
    SUPER_EXEC_        NVARCHAR(64),
    SUPER_CASE_EXEC_   NVARCHAR(64),
    CASE_INST_ID_      NVARCHAR(64),
    ACT_ID_            NVARCHAR(255),
    ACT_INST_ID_       NVARCHAR(64),
    IS_ACTIVE_         TINYINT,
    IS_CONCURRENT_     TINYINT,
    IS_SCOPE_          TINYINT,
    IS_EVENT_SCOPE_    TINYINT,
    SUSPENSION_STATE_  TINYINT,
    CACHED_ENT_STATE_  INT,
    SEQUENCE_COUNTER_  NUMERIC(19, 0),
    TENANT_ID_         NVARCHAR(64),
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_RU_JOB (
    ID_                  NVARCHAR(64)   NOT NULL,
    REV_                 INT,
    TYPE_                NVARCHAR(255)  NOT NULL,
    LOCK_EXP_TIME_       DATETIME2,
    LOCK_OWNER_          NVARCHAR(255),
    EXCLUSIVE_           BIT,
    EXECUTION_ID_        NVARCHAR(64),
    PROCESS_INSTANCE_ID_ NVARCHAR(64),
    PROCESS_DEF_ID_      NVARCHAR(64),
    PROCESS_DEF_KEY_     NVARCHAR(255),
    RETRIES_             INT,
    EXCEPTION_STACK_ID_  NVARCHAR(64),
    EXCEPTION_MSG_       NVARCHAR(4000),
    DUEDATE_             DATETIME2      NULL,
    REPEAT_              NVARCHAR(255),
    HANDLER_TYPE_        NVARCHAR(255),
    HANDLER_CFG_         NVARCHAR(4000),
    DEPLOYMENT_ID_       NVARCHAR(64),
    SUSPENSION_STATE_    TINYINT        NOT NULL DEFAULT 1,
    PRIORITY_            NUMERIC(19, 0) NOT NULL DEFAULT 0,
    JOB_DEF_ID_          NVARCHAR(64),
    SEQUENCE_COUNTER_    NUMERIC(19, 0),
    TENANT_ID_           NVARCHAR(64),
    CREATE_TIME_         DATETIME2,
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_RU_JOBDEF (
    ID_                NVARCHAR(64)  NOT NULL,
    REV_               INTEGER,
    PROC_DEF_ID_       NVARCHAR(64),
    PROC_DEF_KEY_      NVARCHAR(255),
    ACT_ID_            NVARCHAR(255),
    JOB_TYPE_          NVARCHAR(255) NOT NULL,
    JOB_CONFIGURATION_ NVARCHAR(255),
    SUSPENSION_STATE_  TINYINT,
    JOB_PRIORITY_      NUMERIC(19, 0),
    TENANT_ID_         NVARCHAR(64),
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_RE_PROCDEF (
    ID_                 NVARCHAR(64)  NOT NULL,
    REV_                INT,
    CATEGORY_           NVARCHAR(255),
    NAME_               NVARCHAR(255),
    KEY_                NVARCHAR(255) NOT NULL,
    VERSION_            INT           NOT NULL,
    DEPLOYMENT_ID_      NVARCHAR(64),
    RESOURCE_NAME_      NVARCHAR(4000),
    DGRM_RESOURCE_NAME_ NVARCHAR(4000),
    HAS_START_FORM_KEY_ TINYINT,
    SUSPENSION_STATE_   TINYINT,
    TENANT_ID_          NVARCHAR(64),
    VERSION_TAG_        NVARCHAR(64),
    HISTORY_TTL_        INT,
    STARTABLE_          BIT           NOT NULL DEFAULT 1,
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_RU_TASK (
    ID_                NVARCHAR(64),
    REV_               INT,
    EXECUTION_ID_      NVARCHAR(64),
    PROC_INST_ID_      NVARCHAR(64),
    PROC_DEF_ID_       NVARCHAR(64),
    CASE_EXECUTION_ID_ NVARCHAR(64),
    CASE_INST_ID_      NVARCHAR(64),
    CASE_DEF_ID_       NVARCHAR(64),
    NAME_              NVARCHAR(255),
    PARENT_TASK_ID_    NVARCHAR(64),
    DESCRIPTION_       NVARCHAR(4000),
    TASK_DEF_KEY_      NVARCHAR(255),
    OWNER_             NVARCHAR(255),
    ASSIGNEE_          NVARCHAR(255),
    DELEGATION_        NVARCHAR(64),
    PRIORITY_          INT,
    CREATE_TIME_       DATETIME2,
    DUE_DATE_          DATETIME2,
    FOLLOW_UP_DATE_    DATETIME2,
    SUSPENSION_STATE_  INT,
    TENANT_ID_         NVARCHAR(64),
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_RU_IDENTITYLINK (
    ID_          NVARCHAR(64),
    REV_         INT,
    GROUP_ID_    NVARCHAR(255),
    TYPE_        NVARCHAR(255),
    USER_ID_     NVARCHAR(255),
    TASK_ID_     NVARCHAR(64),
    PROC_DEF_ID_ NVARCHAR(64),
    TENANT_ID_   NVARCHAR(64),
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_RU_VARIABLE (
    ID_                  NVARCHAR(64)  NOT NULL,
    REV_                 INT,
    TYPE_                NVARCHAR(255) NOT NULL,
    NAME_                NVARCHAR(255) NOT NULL,
    EXECUTION_ID_        NVARCHAR(64),
    PROC_INST_ID_        NVARCHAR(64),
    CASE_EXECUTION_ID_   NVARCHAR(64),
    CASE_INST_ID_        NVARCHAR(64),
    TASK_ID_             NVARCHAR(64),
    BYTEARRAY_ID_        NVARCHAR(64),
    DOUBLE_              DOUBLE PRECISION,
    LONG_                NUMERIC(19, 0),
    TEXT_                NVARCHAR(4000),
    TEXT2_               NVARCHAR(4000),
    VAR_SCOPE_           NVARCHAR(64)  NOT NULL,
    SEQUENCE_COUNTER_    NUMERIC(19, 0),
    IS_CONCURRENT_LOCAL_ TINYINT,
    TENANT_ID_           NVARCHAR(64),
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_RU_EVENT_SUBSCR (
    ID_            NVARCHAR(64)  NOT NULL,
    REV_           INT,
    EVENT_TYPE_    NVARCHAR(255) NOT NULL,
    EVENT_NAME_    NVARCHAR(255),
    EXECUTION_ID_  NVARCHAR(64),
    PROC_INST_ID_  NVARCHAR(64),
    ACTIVITY_ID_   NVARCHAR(255),
    CONFIGURATION_ NVARCHAR(255),
    CREATED_       DATETIME2     NOT NULL,
    TENANT_ID_     NVARCHAR(64),
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_RU_INCIDENT (
    ID_                     NVARCHAR(64)  NOT NULL,
    REV_                    INT           NOT NULL,
    INCIDENT_TIMESTAMP_     DATETIME2     NOT NULL,
    INCIDENT_MSG_           NVARCHAR(4000),
    INCIDENT_TYPE_          NVARCHAR(255) NOT NULL,
    EXECUTION_ID_           NVARCHAR(64),
    ACTIVITY_ID_            NVARCHAR(255),
    PROC_INST_ID_           NVARCHAR(64),
    PROC_DEF_ID_            NVARCHAR(64),
    CAUSE_INCIDENT_ID_      NVARCHAR(64),
    ROOT_CAUSE_INCIDENT_ID_ NVARCHAR(64),
    CONFIGURATION_          NVARCHAR(255),
    TENANT_ID_              NVARCHAR(64),
    JOB_DEF_ID_             NVARCHAR(64),
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_RU_AUTHORIZATION (
    ID_            NVARCHAR(64) NOT NULL,
    REV_           INT,
    TYPE_          INT          NOT NULL,
    GROUP_ID_      NVARCHAR(255),
    USER_ID_       NVARCHAR(255),
    RESOURCE_TYPE_ INT          NOT NULL,
    RESOURCE_ID_   NVARCHAR(255),
    PERMS_         INT,
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_RU_FILTER (
    ID_            NVARCHAR(64)  NOT NULL,
    REV_           INTEGER       NOT NULL,
    RESOURCE_TYPE_ NVARCHAR(255) NOT NULL,
    NAME_          NVARCHAR(255) NOT NULL,
    OWNER_         NVARCHAR(255),
    QUERY_         NVARCHAR(MAX) NOT NULL,
    PROPERTIES_    NVARCHAR(MAX),
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_RU_METER_LOG (
    ID_           NVARCHAR(64) NOT NULL,
    NAME_         NVARCHAR(64) NOT NULL,
    REPORTER_     NVARCHAR(255),
    VALUE_        NUMERIC(19, 0),
    TIMESTAMP_    DATETIME2,
    MILLISECONDS_ NUMERIC(19, 0) DEFAULT 0,
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_RU_EXT_TASK (
    ID_               NVARCHAR(64)   NOT NULL,
    REV_              INTEGER        NOT NULL,
    WORKER_ID_        NVARCHAR(255),
    TOPIC_NAME_       NVARCHAR(255),
    RETRIES_          INT,
    ERROR_MSG_        NVARCHAR(4000),
    ERROR_DETAILS_ID_ NVARCHAR(64),
    LOCK_EXP_TIME_    DATETIME2,
    SUSPENSION_STATE_ TINYINT,
    EXECUTION_ID_     NVARCHAR(64),
    PROC_INST_ID_     NVARCHAR(64),
    PROC_DEF_ID_      NVARCHAR(64),
    PROC_DEF_KEY_     NVARCHAR(255),
    ACT_ID_           NVARCHAR(255),
    ACT_INST_ID_      NVARCHAR(64),
    TENANT_ID_        NVARCHAR(64),
    PRIORITY_         NUMERIC(19, 0) NOT NULL DEFAULT 0,
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_RU_BATCH (
    ID_                  NVARCHAR(64) NOT NULL,
    REV_                 INT          NOT NULL,
    TYPE_                NVARCHAR(255),
    TOTAL_JOBS_          INT,
    JOBS_CREATED_        INT,
    JOBS_PER_SEED_       INT,
    INVOCATIONS_PER_JOB_ INT,
    SEED_JOB_DEF_ID_     NVARCHAR(64),
    BATCH_JOB_DEF_ID_    NVARCHAR(64),
    MONITOR_JOB_DEF_ID_  NVARCHAR(64),
    SUSPENSION_STATE_    TINYINT,
    CONFIGURATION_       NVARCHAR(255),
    TENANT_ID_           NVARCHAR(64),
    CREATE_USER_ID_      NVARCHAR(255),
    PRIMARY KEY (ID_)
);

CREATE INDEX ACT_IDX_EXEC_ROOT_PI ON ACT_RU_EXECUTION(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_EXEC_BUSKEY ON ACT_RU_EXECUTION(BUSINESS_KEY_);
CREATE INDEX ACT_IDX_EXEC_TENANT_ID ON ACT_RU_EXECUTION(TENANT_ID_);
CREATE INDEX ACT_IDX_TASK_CREATE ON ACT_RU_TASK(CREATE_TIME_);
CREATE INDEX ACT_IDX_TASK_ASSIGNEE ON ACT_RU_TASK(ASSIGNEE_);
CREATE INDEX ACT_IDX_TASK_TENANT_ID ON ACT_RU_TASK(TENANT_ID_);
CREATE INDEX ACT_IDX_IDENT_LNK_USER ON ACT_RU_IDENTITYLINK(USER_ID_);
CREATE INDEX ACT_IDX_IDENT_LNK_GROUP ON ACT_RU_IDENTITYLINK(GROUP_ID_);
CREATE INDEX ACT_IDX_EVENT_SUBSCR_CONFIG_ ON ACT_RU_EVENT_SUBSCR(CONFIGURATION_);
CREATE INDEX ACT_IDX_EVENT_SUBSCR_TENANT_ID ON ACT_RU_EVENT_SUBSCR(TENANT_ID_);
CREATE INDEX ACT_IDX_VARIABLE_TASK_ID ON ACT_RU_VARIABLE(TASK_ID_);
CREATE INDEX ACT_IDX_VARIABLE_TENANT_ID ON ACT_RU_VARIABLE(TENANT_ID_);
CREATE INDEX ACT_IDX_ATHRZ_PROCEDEF ON ACT_RU_IDENTITYLINK(PROC_DEF_ID_);
CREATE INDEX ACT_IDX_INC_CONFIGURATION ON ACT_RU_INCIDENT(CONFIGURATION_);
CREATE INDEX ACT_IDX_INC_TENANT_ID ON ACT_RU_INCIDENT(TENANT_ID_);
-- CAM-5914
CREATE INDEX ACT_IDX_JOB_EXECUTION_ID ON ACT_RU_JOB(EXECUTION_ID_);
CREATE INDEX ACT_IDX_JOB_PROCINST ON ACT_RU_JOB(PROCESS_INSTANCE_ID_);
CREATE INDEX ACT_IDX_JOB_TENANT_ID ON ACT_RU_JOB(TENANT_ID_);
CREATE INDEX ACT_IDX_JOBDEF_TENANT_ID ON ACT_RU_JOBDEF(TENANT_ID_);
CREATE UNIQUE INDEX ACT_UNIQ_AUTH_USER ON ACT_RU_AUTHORIZATION(TYPE_, USER_ID_, RESOURCE_TYPE_, RESOURCE_ID_) WHERE USER_ID_ IS NOT NULL;
CREATE UNIQUE INDEX ACT_UNIQ_AUTH_GROUP ON ACT_RU_AUTHORIZATION(TYPE_, GROUP_ID_, RESOURCE_TYPE_, RESOURCE_ID_) WHERE GROUP_ID_ IS NOT NULL;
CREATE UNIQUE INDEX ACT_UNIQ_VARIABLE ON ACT_RU_VARIABLE(VAR_SCOPE_, NAME_);

-- new metric milliseconds column
CREATE INDEX ACT_IDX_METER_LOG_MS ON ACT_RU_METER_LOG(MILLISECONDS_);
CREATE INDEX ACT_IDX_METER_LOG_NAME_MS ON ACT_RU_METER_LOG(NAME_, MILLISECONDS_);
CREATE INDEX ACT_IDX_METER_LOG_REPORT ON ACT_RU_METER_LOG(NAME_, REPORTER_, MILLISECONDS_);

-- old metric timestamp column
CREATE INDEX ACT_IDX_METER_LOG_TIME ON ACT_RU_METER_LOG(TIMESTAMP_);
CREATE INDEX ACT_IDX_METER_LOG ON ACT_RU_METER_LOG(NAME_, TIMESTAMP_);

CREATE INDEX ACT_IDX_EXT_TASK_TOPIC ON ACT_RU_EXT_TASK(TOPIC_NAME_);
CREATE INDEX ACT_IDX_EXT_TASK_TENANT_ID ON ACT_RU_EXT_TASK(TENANT_ID_);
CREATE INDEX ACT_IDX_EXT_TASK_PRIORITY ON ACT_RU_EXT_TASK(PRIORITY_);
CREATE INDEX ACT_IDX_EXT_TASK_ERR_DETAILS ON ACT_RU_EXT_TASK(ERROR_DETAILS_ID_);
CREATE INDEX ACT_IDX_AUTH_GROUP_ID ON ACT_RU_AUTHORIZATION(GROUP_ID_);
CREATE INDEX ACT_IDX_JOB_JOB_DEF_ID ON ACT_RU_JOB(JOB_DEF_ID_);

ALTER TABLE ACT_GE_BYTEARRAY
    ADD CONSTRAINT ACT_FK_BYTEARR_DEPL
        FOREIGN KEY (DEPLOYMENT_ID_)
            REFERENCES ACT_RE_DEPLOYMENT(ID_);

ALTER TABLE ACT_RU_EXECUTION
    ADD CONSTRAINT ACT_FK_EXE_PROCINST
        FOREIGN KEY (PROC_INST_ID_)
            REFERENCES ACT_RU_EXECUTION(ID_);

ALTER TABLE ACT_RU_EXECUTION
    ADD CONSTRAINT ACT_FK_EXE_PARENT
        FOREIGN KEY (PARENT_ID_)
            REFERENCES ACT_RU_EXECUTION(ID_);

ALTER TABLE ACT_RU_EXECUTION
    ADD CONSTRAINT ACT_FK_EXE_SUPER
        FOREIGN KEY (SUPER_EXEC_)
            REFERENCES ACT_RU_EXECUTION(ID_);

ALTER TABLE ACT_RU_EXECUTION
    ADD CONSTRAINT ACT_FK_EXE_PROCDEF
        FOREIGN KEY (PROC_DEF_ID_)
            REFERENCES ACT_RE_PROCDEF(ID_);

ALTER TABLE ACT_RU_IDENTITYLINK
    ADD CONSTRAINT ACT_FK_TSKASS_TASK
        FOREIGN KEY (TASK_ID_)
            REFERENCES ACT_RU_TASK(ID_);

ALTER TABLE ACT_RU_IDENTITYLINK
    ADD CONSTRAINT ACT_FK_ATHRZ_PROCEDEF
        FOREIGN KEY (PROC_DEF_ID_)
            REFERENCES ACT_RE_PROCDEF(ID_);

ALTER TABLE ACT_RU_TASK
    ADD CONSTRAINT ACT_FK_TASK_EXE
        FOREIGN KEY (EXECUTION_ID_)
            REFERENCES ACT_RU_EXECUTION(ID_);

ALTER TABLE ACT_RU_TASK
    ADD CONSTRAINT ACT_FK_TASK_PROCINST
        FOREIGN KEY (PROC_INST_ID_)
            REFERENCES ACT_RU_EXECUTION(ID_);

ALTER TABLE ACT_RU_TASK
    ADD CONSTRAINT ACT_FK_TASK_PROCDEF
        FOREIGN KEY (PROC_DEF_ID_)
            REFERENCES ACT_RE_PROCDEF(ID_);

ALTER TABLE ACT_RU_VARIABLE
    ADD CONSTRAINT ACT_FK_VAR_EXE
        FOREIGN KEY (EXECUTION_ID_)
            REFERENCES ACT_RU_EXECUTION(ID_);

ALTER TABLE ACT_RU_VARIABLE
    ADD CONSTRAINT ACT_FK_VAR_PROCINST
        FOREIGN KEY (PROC_INST_ID_)
            REFERENCES ACT_RU_EXECUTION(ID_);

ALTER TABLE ACT_RU_VARIABLE
    ADD CONSTRAINT ACT_FK_VAR_BYTEARRAY
        FOREIGN KEY (BYTEARRAY_ID_)
            REFERENCES ACT_GE_BYTEARRAY(ID_);

ALTER TABLE ACT_RU_JOB
    ADD CONSTRAINT ACT_FK_JOB_EXCEPTION
        FOREIGN KEY (EXCEPTION_STACK_ID_)
            REFERENCES ACT_GE_BYTEARRAY(ID_);

ALTER TABLE ACT_RU_EVENT_SUBSCR
    ADD CONSTRAINT ACT_FK_EVENT_EXEC
        FOREIGN KEY (EXECUTION_ID_)
            REFERENCES ACT_RU_EXECUTION(ID_);

ALTER TABLE ACT_RU_INCIDENT
    ADD CONSTRAINT ACT_FK_INC_EXE
        FOREIGN KEY (EXECUTION_ID_)
            REFERENCES ACT_RU_EXECUTION(ID_);

ALTER TABLE ACT_RU_INCIDENT
    ADD CONSTRAINT ACT_FK_INC_PROCINST
        FOREIGN KEY (PROC_INST_ID_)
            REFERENCES ACT_RU_EXECUTION(ID_);

ALTER TABLE ACT_RU_INCIDENT
    ADD CONSTRAINT ACT_FK_INC_PROCDEF
        FOREIGN KEY (PROC_DEF_ID_)
            REFERENCES ACT_RE_PROCDEF(ID_);

ALTER TABLE ACT_RU_INCIDENT
    ADD CONSTRAINT ACT_FK_INC_CAUSE
        FOREIGN KEY (CAUSE_INCIDENT_ID_)
            REFERENCES ACT_RU_INCIDENT(ID_);

ALTER TABLE ACT_RU_INCIDENT
    ADD CONSTRAINT ACT_FK_INC_RCAUSE
        FOREIGN KEY (ROOT_CAUSE_INCIDENT_ID_)
            REFERENCES ACT_RU_INCIDENT(ID_);

ALTER TABLE ACT_RU_EXT_TASK
    ADD CONSTRAINT ACT_FK_EXT_TASK_ERROR_DETAILS
        FOREIGN KEY (ERROR_DETAILS_ID_)
            REFERENCES ACT_GE_BYTEARRAY(ID_);

CREATE INDEX ACT_IDX_INCIDENT_JOB_DEF ON ACT_RU_INCIDENT(JOB_DEF_ID_);
ALTER TABLE ACT_RU_INCIDENT
    ADD CONSTRAINT ACT_FK_INC_JOB_DEF
        FOREIGN KEY (JOB_DEF_ID_)
            REFERENCES ACT_RU_JOBDEF(ID_);

ALTER TABLE ACT_RU_EXT_TASK
    ADD CONSTRAINT ACT_FK_EXT_TASK_EXE
        FOREIGN KEY (EXECUTION_ID_)
            REFERENCES ACT_RU_EXECUTION(ID_);

CREATE INDEX ACT_IDX_BATCH_SEED_JOB_DEF ON ACT_RU_BATCH(SEED_JOB_DEF_ID_);
ALTER TABLE ACT_RU_BATCH
    ADD CONSTRAINT ACT_FK_BATCH_SEED_JOB_DEF
        FOREIGN KEY (SEED_JOB_DEF_ID_)
            REFERENCES ACT_RU_JOBDEF(ID_);

CREATE INDEX ACT_IDX_BATCH_MONITOR_JOB_DEF ON ACT_RU_BATCH(MONITOR_JOB_DEF_ID_);
ALTER TABLE ACT_RU_BATCH
    ADD CONSTRAINT ACT_FK_BATCH_MONITOR_JOB_DEF
        FOREIGN KEY (MONITOR_JOB_DEF_ID_)
            REFERENCES ACT_RU_JOBDEF(ID_);

CREATE INDEX ACT_IDX_BATCH_JOB_DEF ON ACT_RU_BATCH(BATCH_JOB_DEF_ID_);
ALTER TABLE ACT_RU_BATCH
    ADD CONSTRAINT ACT_FK_BATCH_JOB_DEF
        FOREIGN KEY (BATCH_JOB_DEF_ID_)
            REFERENCES ACT_RU_JOBDEF(ID_);

-- indexes for concurrency problems - https://app.camunda.com/jira/browse/CAM-1646 --
CREATE INDEX ACT_IDX_EXECUTION_PROC ON ACT_RU_EXECUTION(PROC_DEF_ID_);
CREATE INDEX ACT_IDX_EXECUTION_PARENT ON ACT_RU_EXECUTION(PARENT_ID_);
CREATE INDEX ACT_IDX_EXECUTION_SUPER ON ACT_RU_EXECUTION(SUPER_EXEC_);
CREATE INDEX ACT_IDX_EXECUTION_PROCINST ON ACT_RU_EXECUTION(PROC_INST_ID_);
CREATE INDEX ACT_IDX_EVENT_SUBSCR_EXEC ON ACT_RU_EVENT_SUBSCR(EXECUTION_ID_);
CREATE INDEX ACT_IDX_BA_DEPLOYMENT ON ACT_GE_BYTEARRAY(DEPLOYMENT_ID_);
CREATE INDEX ACT_IDX_IDENT_LNK_TASK ON ACT_RU_IDENTITYLINK(TASK_ID_);
CREATE INDEX ACT_IDX_INCIDENT_EXEC ON ACT_RU_INCIDENT(EXECUTION_ID_);
CREATE INDEX ACT_IDX_INCIDENT_PROCINST ON ACT_RU_INCIDENT(PROC_INST_ID_);
CREATE INDEX ACT_IDX_INCIDENT_PROC_DEF_ID ON ACT_RU_INCIDENT(PROC_DEF_ID_);
CREATE INDEX ACT_IDX_INCIDENT_CAUSE ON ACT_RU_INCIDENT(CAUSE_INCIDENT_ID_);
CREATE INDEX ACT_IDX_INCIDENT_ROOT_CAUSE ON ACT_RU_INCIDENT(ROOT_CAUSE_INCIDENT_ID_);
CREATE INDEX ACT_IDX_JOB_EXCEPTION_STACK ON ACT_RU_JOB(EXCEPTION_STACK_ID_);
CREATE INDEX ACT_IDX_VARIABLE_BA ON ACT_RU_VARIABLE(BYTEARRAY_ID_);
CREATE INDEX ACT_IDX_VARIABLE_EXEC ON ACT_RU_VARIABLE(EXECUTION_ID_);
CREATE INDEX ACT_IDX_VARIABLE_PROCINST ON ACT_RU_VARIABLE(PROC_INST_ID_);
CREATE INDEX ACT_IDX_TASK_EXEC ON ACT_RU_TASK(EXECUTION_ID_);
CREATE INDEX ACT_IDX_TASK_PROCINST ON ACT_RU_TASK(PROC_INST_ID_);
CREATE INDEX ACT_IDX_TASK_PROC_DEF_ID ON ACT_RU_TASK(PROC_DEF_ID_);
-- index for deadlock problem - https://app.camunda.com/jira/browse/CAM-4440 --
CREATE INDEX ACT_IDX_AUTH_RESOURCE_ID ON ACT_RU_AUTHORIZATION(RESOURCE_ID_);
-- index to prevent deadlock on fk constraint - https://app.camunda.com/jira/browse/CAM-5440 --
CREATE INDEX ACT_IDX_EXT_TASK_EXEC ON ACT_RU_EXT_TASK(EXECUTION_ID_);

-- indexes to improve deployment
CREATE INDEX ACT_IDX_BYTEARRAY_ROOT_PI ON ACT_GE_BYTEARRAY(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_BYTEARRAY_RM_TIME ON ACT_GE_BYTEARRAY(REMOVAL_TIME_);
CREATE INDEX ACT_IDX_BYTEARRAY_NAME ON ACT_GE_BYTEARRAY(NAME_);
CREATE INDEX ACT_IDX_DEPLOYMENT_NAME ON ACT_RE_DEPLOYMENT(NAME_);
CREATE INDEX ACT_IDX_DEPLOYMENT_TENANT_ID ON ACT_RE_DEPLOYMENT(TENANT_ID_);
CREATE INDEX ACT_IDX_JOBDEF_PROC_DEF_ID ON ACT_RU_JOBDEF(PROC_DEF_ID_);
CREATE INDEX ACT_IDX_JOB_HANDLER_TYPE ON ACT_RU_JOB(HANDLER_TYPE_);
CREATE INDEX ACT_IDX_EVENT_SUBSCR_EVT_NAME ON ACT_RU_EVENT_SUBSCR(EVENT_NAME_);
CREATE INDEX ACT_IDX_PROCDEF_DEPLOYMENT_ID ON ACT_RE_PROCDEF(DEPLOYMENT_ID_);
CREATE INDEX ACT_IDX_PROCDEF_TENANT_ID ON ACT_RE_PROCDEF(TENANT_ID_);
CREATE INDEX ACT_IDX_PROCDEF_VER_TAG ON ACT_RE_PROCDEF(VERSION_TAG_);
--
-- Copyright Â© 2012 - 2018 camunda services GmbH and various authors (info@camunda.com)
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--

-- create case definition table --
CREATE TABLE ACT_RE_CASE_DEF (
    ID_                 NVARCHAR(64)  NOT NULL,
    REV_                INT,
    CATEGORY_           NVARCHAR(255),
    NAME_               NVARCHAR(255),
    KEY_                NVARCHAR(255) NOT NULL,
    VERSION_            INT           NOT NULL,
    DEPLOYMENT_ID_      NVARCHAR(64),
    RESOURCE_NAME_      NVARCHAR(4000),
    DGRM_RESOURCE_NAME_ NVARCHAR(4000),
    TENANT_ID_          NVARCHAR(64),
    HISTORY_TTL_        INT,
    PRIMARY KEY (ID_)
);

-- create case execution table --
CREATE TABLE ACT_RU_CASE_EXECUTION (
    ID_              NVARCHAR(64) NOT NULL,
    REV_             INT,
    CASE_INST_ID_    NVARCHAR(64),
    SUPER_CASE_EXEC_ NVARCHAR(64),
    SUPER_EXEC_      NVARCHAR(64),
    BUSINESS_KEY_    NVARCHAR(255),
    PARENT_ID_       NVARCHAR(64),
    CASE_DEF_ID_     NVARCHAR(64),
    ACT_ID_          NVARCHAR(255),
    PREV_STATE_      INT,
    CURRENT_STATE_   INT,
    REQUIRED_        TINYINT,
    TENANT_ID_       NVARCHAR(64),
    PRIMARY KEY (ID_)
);

-- create case sentry part table --

CREATE TABLE ACT_RU_CASE_SENTRY_PART (
    ID_                  NVARCHAR(64) NOT NULL,
    REV_                 INT,
    CASE_INST_ID_        NVARCHAR(64),
    CASE_EXEC_ID_        NVARCHAR(64),
    SENTRY_ID_           NVARCHAR(255),
    TYPE_                NVARCHAR(255),
    SOURCE_CASE_EXEC_ID_ NVARCHAR(64),
    STANDARD_EVENT_      NVARCHAR(255),
    SOURCE_              NVARCHAR(255),
    VARIABLE_EVENT_      NVARCHAR(255),
    VARIABLE_NAME_       NVARCHAR(255),
    SATISFIED_           TINYINT,
    TENANT_ID_           NVARCHAR(64),
    PRIMARY KEY (ID_)
);

-- create index on business key --
CREATE INDEX ACT_IDX_CASE_EXEC_BUSKEY ON ACT_RU_CASE_EXECUTION(BUSINESS_KEY_);

-- https://app.camunda.com/jira/browse/CAM-9165
CREATE INDEX ACT_IDX_CASE_EXE_CASE_INST ON ACT_RU_CASE_EXECUTION(CASE_INST_ID_);

-- create foreign key constraints on ACT_RU_CASE_EXECUTION --
ALTER TABLE ACT_RU_CASE_EXECUTION
    ADD CONSTRAINT ACT_FK_CASE_EXE_CASE_INST
        FOREIGN KEY (CASE_INST_ID_)
            REFERENCES ACT_RU_CASE_EXECUTION(ID_);

ALTER TABLE ACT_RU_CASE_EXECUTION
    ADD CONSTRAINT ACT_FK_CASE_EXE_PARENT
        FOREIGN KEY (PARENT_ID_)
            REFERENCES ACT_RU_CASE_EXECUTION(ID_);

ALTER TABLE ACT_RU_CASE_EXECUTION
    ADD CONSTRAINT ACT_FK_CASE_EXE_CASE_DEF
        FOREIGN KEY (CASE_DEF_ID_)
            REFERENCES ACT_RE_CASE_DEF(ID_);

-- create foreign key constraints on ACT_RU_VARIABLE --
ALTER TABLE ACT_RU_VARIABLE
    ADD CONSTRAINT ACT_FK_VAR_CASE_EXE
        FOREIGN KEY (CASE_EXECUTION_ID_)
            REFERENCES ACT_RU_CASE_EXECUTION(ID_);

ALTER TABLE ACT_RU_VARIABLE
    ADD CONSTRAINT ACT_FK_VAR_CASE_INST
        FOREIGN KEY (CASE_INST_ID_)
            REFERENCES ACT_RU_CASE_EXECUTION(ID_);

-- create foreign key constraints on ACT_RU_TASK --
ALTER TABLE ACT_RU_TASK
    ADD CONSTRAINT ACT_FK_TASK_CASE_EXE
        FOREIGN KEY (CASE_EXECUTION_ID_)
            REFERENCES ACT_RU_CASE_EXECUTION(ID_);

ALTER TABLE ACT_RU_TASK
    ADD CONSTRAINT ACT_FK_TASK_CASE_DEF
        FOREIGN KEY (CASE_DEF_ID_)
            REFERENCES ACT_RE_CASE_DEF(ID_);

-- create foreign key constraints on ACT_RU_CASE_SENTRY_PART --
ALTER TABLE ACT_RU_CASE_SENTRY_PART
    ADD CONSTRAINT ACT_FK_CASE_SENTRY_CASE_INST
        FOREIGN KEY (CASE_INST_ID_)
            REFERENCES ACT_RU_CASE_EXECUTION(ID_);

ALTER TABLE ACT_RU_CASE_SENTRY_PART
    ADD CONSTRAINT ACT_FK_CASE_SENTRY_CASE_EXEC
        FOREIGN KEY (CASE_EXEC_ID_)
            REFERENCES ACT_RU_CASE_EXECUTION(ID_);

-- indexes for concurrency problems - https://app.camunda.com/jira/browse/CAM-1646 --
CREATE INDEX ACT_IDX_CASE_EXEC_CASE ON ACT_RU_CASE_EXECUTION(CASE_DEF_ID_);
CREATE INDEX ACT_IDX_CASE_EXEC_PARENT ON ACT_RU_CASE_EXECUTION(PARENT_ID_);
CREATE INDEX ACT_IDX_VARIABLE_CASE_EXEC ON ACT_RU_VARIABLE(CASE_EXECUTION_ID_);
CREATE INDEX ACT_IDX_VARIABLE_CASE_INST ON ACT_RU_VARIABLE(CASE_INST_ID_);
CREATE INDEX ACT_IDX_TASK_CASE_EXEC ON ACT_RU_TASK(CASE_EXECUTION_ID_);
CREATE INDEX ACT_IDX_TASK_CASE_DEF_ID ON ACT_RU_TASK(CASE_DEF_ID_);

-- add indexes for ACT_RU_CASE_SENTRY_PART --
CREATE INDEX ACT_IDX_CASE_SENTRY_CASE_INST ON ACT_RU_CASE_SENTRY_PART(CASE_INST_ID_);
CREATE INDEX ACT_IDX_CASE_SENTRY_CASE_EXEC ON ACT_RU_CASE_SENTRY_PART(CASE_EXEC_ID_);

CREATE INDEX ACT_IDX_CASE_DEF_TENANT_ID ON ACT_RE_CASE_DEF(TENANT_ID_);
CREATE INDEX ACT_IDX_CASE_EXEC_TENANT_ID ON ACT_RU_CASE_EXECUTION(TENANT_ID_);
--
-- Copyright Â© 2012 - 2018 camunda services GmbH and various authors (info@camunda.com)
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--

-- create decision definition table --
CREATE TABLE ACT_RE_DECISION_DEF (
    ID_                 NVARCHAR(64)  NOT NULL,
    REV_                INT,
    CATEGORY_           NVARCHAR(255),
    NAME_               NVARCHAR(255),
    KEY_                NVARCHAR(255) NOT NULL,
    VERSION_            INT           NOT NULL,
    DEPLOYMENT_ID_      NVARCHAR(64),
    RESOURCE_NAME_      NVARCHAR(4000),
    DGRM_RESOURCE_NAME_ NVARCHAR(4000),
    DEC_REQ_ID_         NVARCHAR(64),
    DEC_REQ_KEY_        NVARCHAR(255),
    TENANT_ID_          NVARCHAR(64),
    HISTORY_TTL_        INT,
    VERSION_TAG_        NVARCHAR(64),
    PRIMARY KEY (ID_)
);

-- create decision requirements definition table --
CREATE TABLE ACT_RE_DECISION_REQ_DEF (
    ID_                 NVARCHAR(64)  NOT NULL,
    REV_                INT,
    CATEGORY_           NVARCHAR(255),
    NAME_               NVARCHAR(255),
    KEY_                NVARCHAR(255) NOT NULL,
    VERSION_            INT           NOT NULL,
    DEPLOYMENT_ID_      NVARCHAR(64),
    RESOURCE_NAME_      NVARCHAR(4000),
    DGRM_RESOURCE_NAME_ NVARCHAR(4000),
    TENANT_ID_          NVARCHAR(64),
    PRIMARY KEY (ID_)
);

ALTER TABLE ACT_RE_DECISION_DEF
    ADD CONSTRAINT ACT_FK_DEC_REQ
        FOREIGN KEY (DEC_REQ_ID_)
            REFERENCES ACT_RE_DECISION_REQ_DEF(ID_);

CREATE INDEX ACT_IDX_DEC_DEF_TENANT_ID ON ACT_RE_DECISION_DEF(TENANT_ID_);
CREATE INDEX ACT_IDX_DEC_DEF_REQ_ID ON ACT_RE_DECISION_DEF(DEC_REQ_ID_);
CREATE INDEX ACT_IDX_DEC_REQ_DEF_TENANT_ID ON ACT_RE_DECISION_REQ_DEF(TENANT_ID_);
--
-- Copyright Â© 2012 - 2018 camunda services GmbH and various authors (info@camunda.com)
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--

CREATE TABLE ACT_HI_PROCINST (
    ID_                        NVARCHAR(64) NOT NULL,
    PROC_INST_ID_              NVARCHAR(64) NOT NULL,
    BUSINESS_KEY_              NVARCHAR(255),
    PROC_DEF_KEY_              NVARCHAR(255),
    PROC_DEF_ID_               NVARCHAR(64) NOT NULL,
    START_TIME_                DATETIME2    NOT NULL,
    END_TIME_                  DATETIME2,
    REMOVAL_TIME_              DATETIME2,
    DURATION_                  NUMERIC(19, 0),
    START_USER_ID_             NVARCHAR(255),
    START_ACT_ID_              NVARCHAR(255),
    END_ACT_ID_                NVARCHAR(255),
    SUPER_PROCESS_INSTANCE_ID_ NVARCHAR(64),
    ROOT_PROC_INST_ID_         NVARCHAR(64),
    SUPER_CASE_INSTANCE_ID_    NVARCHAR(64),
    CASE_INST_ID_              NVARCHAR(64),
    DELETE_REASON_             NVARCHAR(4000),
    TENANT_ID_                 NVARCHAR(64),
    STATE_                     NVARCHAR(255),
    PRIMARY KEY (ID_),
    UNIQUE (PROC_INST_ID_)
);

CREATE TABLE ACT_HI_ACTINST (
    ID_                 NVARCHAR(64)  NOT NULL,
    PARENT_ACT_INST_ID_ NVARCHAR(64),
    PROC_DEF_KEY_       NVARCHAR(255),
    PROC_DEF_ID_        NVARCHAR(64)  NOT NULL,
    ROOT_PROC_INST_ID_  NVARCHAR(64),
    PROC_INST_ID_       NVARCHAR(64)  NOT NULL,
    EXECUTION_ID_       NVARCHAR(64)  NOT NULL,
    ACT_ID_             NVARCHAR(255) NOT NULL,
    TASK_ID_            NVARCHAR(64),
    CALL_PROC_INST_ID_  NVARCHAR(64),
    CALL_CASE_INST_ID_  NVARCHAR(64),
    ACT_NAME_           NVARCHAR(255),
    ACT_TYPE_           NVARCHAR(255) NOT NULL,
    ASSIGNEE_           NVARCHAR(64),
    START_TIME_         DATETIME2     NOT NULL,
    END_TIME_           DATETIME2,
    DURATION_           NUMERIC(19, 0),
    ACT_INST_STATE_     TINYINT,
    SEQUENCE_COUNTER_   NUMERIC(19, 0),
    TENANT_ID_          NVARCHAR(64),
    REMOVAL_TIME_       DATETIME2,
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_HI_TASKINST (
    ID_                NVARCHAR(64) NOT NULL,
    TASK_DEF_KEY_      NVARCHAR(255),
    PROC_DEF_KEY_      NVARCHAR(255),
    PROC_DEF_ID_       NVARCHAR(64),
    ROOT_PROC_INST_ID_ NVARCHAR(64),
    PROC_INST_ID_      NVARCHAR(64),
    EXECUTION_ID_      NVARCHAR(64),
    CASE_DEF_KEY_      NVARCHAR(255),
    CASE_DEF_ID_       NVARCHAR(64),
    CASE_INST_ID_      NVARCHAR(64),
    CASE_EXECUTION_ID_ NVARCHAR(64),
    ACT_INST_ID_       NVARCHAR(64),
    NAME_              NVARCHAR(255),
    PARENT_TASK_ID_    NVARCHAR(64),
    DESCRIPTION_       NVARCHAR(4000),
    OWNER_             NVARCHAR(255),
    ASSIGNEE_          NVARCHAR(255),
    START_TIME_        DATETIME2    NOT NULL,
    END_TIME_          DATETIME2,
    DURATION_          NUMERIC(19, 0),
    DELETE_REASON_     NVARCHAR(4000),
    PRIORITY_          INT,
    DUE_DATE_          DATETIME2,
    FOLLOW_UP_DATE_    DATETIME2,
    TENANT_ID_         NVARCHAR(64),
    REMOVAL_TIME_      DATETIME2,
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_HI_VARINST (
    ID_                NVARCHAR(64)  NOT NULL,
    PROC_DEF_KEY_      NVARCHAR(255),
    PROC_DEF_ID_       NVARCHAR(64),
    ROOT_PROC_INST_ID_ NVARCHAR(64),
    PROC_INST_ID_      NVARCHAR(64),
    EXECUTION_ID_      NVARCHAR(64),
    CASE_DEF_KEY_      NVARCHAR(255),
    CASE_DEF_ID_       NVARCHAR(64),
    CASE_INST_ID_      NVARCHAR(64),
    CASE_EXECUTION_ID_ NVARCHAR(64),
    ACT_INST_ID_       NVARCHAR(64),
    TASK_ID_           NVARCHAR(64),
    NAME_              NVARCHAR(255) NOT NULL,
    VAR_TYPE_          NVARCHAR(100),
    CREATE_TIME_       DATETIME2,
    REV_               INT,
    BYTEARRAY_ID_      NVARCHAR(64),
    DOUBLE_            DOUBLE PRECISION,
    LONG_              NUMERIC(19, 0),
    TEXT_              NVARCHAR(4000),
    TEXT2_             NVARCHAR(4000),
    TENANT_ID_         NVARCHAR(64),
    STATE_             NVARCHAR(20),
    REMOVAL_TIME_      DATETIME2,
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_HI_DETAIL (
    ID_                NVARCHAR(64)  NOT NULL,
    TYPE_              NVARCHAR(255) NOT NULL,
    PROC_DEF_KEY_      NVARCHAR(255),
    PROC_DEF_ID_       NVARCHAR(64),
    ROOT_PROC_INST_ID_ NVARCHAR(64),
    PROC_INST_ID_      NVARCHAR(64),
    EXECUTION_ID_      NVARCHAR(64),
    CASE_DEF_KEY_      NVARCHAR(255),
    CASE_DEF_ID_       NVARCHAR(64),
    CASE_INST_ID_      NVARCHAR(64),
    CASE_EXECUTION_ID_ NVARCHAR(64),
    TASK_ID_           NVARCHAR(64),
    ACT_INST_ID_       NVARCHAR(64),
    VAR_INST_ID_       NVARCHAR(64),
    NAME_              NVARCHAR(255) NOT NULL,
    VAR_TYPE_          NVARCHAR(255),
    REV_               INT,
    TIME_              DATETIME2     NOT NULL,
    BYTEARRAY_ID_      NVARCHAR(64),
    DOUBLE_            DOUBLE PRECISION,
    LONG_              NUMERIC(19, 0),
    TEXT_              NVARCHAR(4000),
    TEXT2_             NVARCHAR(4000),
    SEQUENCE_COUNTER_  NUMERIC(19, 0),
    TENANT_ID_         NVARCHAR(64),
    OPERATION_ID_      NVARCHAR(64),
    REMOVAL_TIME_      DATETIME2,
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_HI_IDENTITYLINK (
    ID_                NVARCHAR(64) NOT NULL,
    TIMESTAMP_         DATETIME2    NOT NULL,
    TYPE_              NVARCHAR(255),
    USER_ID_           NVARCHAR(255),
    GROUP_ID_          NVARCHAR(255),
    TASK_ID_           NVARCHAR(64),
    ROOT_PROC_INST_ID_ NVARCHAR(64),
    PROC_DEF_ID_       NVARCHAR(64),
    OPERATION_TYPE_    NVARCHAR(64),
    ASSIGNER_ID_       NVARCHAR(64),
    PROC_DEF_KEY_      NVARCHAR(255),
    TENANT_ID_         NVARCHAR(64),
    REMOVAL_TIME_      DATETIME2,
    PRIMARY KEY (ID_)
);
CREATE TABLE ACT_HI_COMMENT (
    ID_                NVARCHAR(64) NOT NULL,
    TYPE_              NVARCHAR(255),
    TIME_              DATETIME2    NOT NULL,
    USER_ID_           NVARCHAR(255),
    TASK_ID_           NVARCHAR(64),
    ROOT_PROC_INST_ID_ NVARCHAR(64),
    PROC_INST_ID_      NVARCHAR(64),
    ACTION_            NVARCHAR(255),
    MESSAGE_           NVARCHAR(4000),
    FULL_MSG_          IMAGE,
    TENANT_ID_         NVARCHAR(64),
    REMOVAL_TIME_      DATETIME2,
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_HI_ATTACHMENT (
    ID_                NVARCHAR(64) NOT NULL,
    REV_               INTEGER,
    USER_ID_           NVARCHAR(255),
    NAME_              NVARCHAR(255),
    DESCRIPTION_       NVARCHAR(4000),
    TYPE_              NVARCHAR(255),
    TASK_ID_           NVARCHAR(64),
    ROOT_PROC_INST_ID_ NVARCHAR(64),
    PROC_INST_ID_      NVARCHAR(64),
    URL_               NVARCHAR(4000),
    CONTENT_ID_        NVARCHAR(64),
    TENANT_ID_         NVARCHAR(64),
    CREATE_TIME_       DATETIME2,
    REMOVAL_TIME_      DATETIME2,
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_HI_OP_LOG (
    ID_                NVARCHAR(64) NOT NULL,
    DEPLOYMENT_ID_     NVARCHAR(64),
    PROC_DEF_ID_       NVARCHAR(64),
    PROC_DEF_KEY_      NVARCHAR(255),
    ROOT_PROC_INST_ID_ NVARCHAR(64),
    PROC_INST_ID_      NVARCHAR(64),
    EXECUTION_ID_      NVARCHAR(64),
    CASE_DEF_ID_       NVARCHAR(64),
    CASE_INST_ID_      NVARCHAR(64),
    CASE_EXECUTION_ID_ NVARCHAR(64),
    TASK_ID_           NVARCHAR(64),
    JOB_ID_            NVARCHAR(64),
    JOB_DEF_ID_        NVARCHAR(64),
    BATCH_ID_          NVARCHAR(64),
    USER_ID_           NVARCHAR(255),
    TIMESTAMP_         DATETIME2    NOT NULL,
    OPERATION_TYPE_    NVARCHAR(64),
    OPERATION_ID_      NVARCHAR(64),
    ENTITY_TYPE_       NVARCHAR(30),
    PROPERTY_          NVARCHAR(64),
    ORG_VALUE_         NVARCHAR(4000),
    NEW_VALUE_         NVARCHAR(4000),
    TENANT_ID_         NVARCHAR(64),
    REMOVAL_TIME_      DATETIME2,
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_HI_INCIDENT (
    ID_                     NVARCHAR(64)  NOT NULL,
    PROC_DEF_KEY_           NVARCHAR(255),
    PROC_DEF_ID_            NVARCHAR(64),
    ROOT_PROC_INST_ID_      NVARCHAR(64),
    PROC_INST_ID_           NVARCHAR(64),
    EXECUTION_ID_           NVARCHAR(64),
    CREATE_TIME_            DATETIME2     NOT NULL,
    END_TIME_               DATETIME2,
    INCIDENT_MSG_           NVARCHAR(4000),
    INCIDENT_TYPE_          NVARCHAR(255) NOT NULL,
    ACTIVITY_ID_            NVARCHAR(255),
    CAUSE_INCIDENT_ID_      NVARCHAR(64),
    ROOT_CAUSE_INCIDENT_ID_ NVARCHAR(64),
    CONFIGURATION_          NVARCHAR(255),
    INCIDENT_STATE_         INTEGER,
    TENANT_ID_              NVARCHAR(64),
    JOB_DEF_ID_             NVARCHAR(64),
    REMOVAL_TIME_           DATETIME2,
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_HI_JOB_LOG (
    ID_                     NVARCHAR(64)   NOT NULL,
    TIMESTAMP_              DATETIME2      NOT NULL,
    JOB_ID_                 NVARCHAR(64)   NOT NULL,
    JOB_DUEDATE_            DATETIME2,
    JOB_RETRIES_            INTEGER,
    JOB_PRIORITY_           NUMERIC(19, 0) NOT NULL DEFAULT 0,
    JOB_EXCEPTION_MSG_      NVARCHAR(4000),
    JOB_EXCEPTION_STACK_ID_ NVARCHAR(64),
    JOB_STATE_              INTEGER,
    JOB_DEF_ID_             NVARCHAR(64),
    JOB_DEF_TYPE_           NVARCHAR(255),
    JOB_DEF_CONFIGURATION_  NVARCHAR(255),
    ACT_ID_                 NVARCHAR(255),
    EXECUTION_ID_           NVARCHAR(64),
    ROOT_PROC_INST_ID_      NVARCHAR(64),
    PROCESS_INSTANCE_ID_    NVARCHAR(64),
    PROCESS_DEF_ID_         NVARCHAR(64),
    PROCESS_DEF_KEY_        NVARCHAR(255),
    DEPLOYMENT_ID_          NVARCHAR(64),
    SEQUENCE_COUNTER_       NUMERIC(19, 0),
    TENANT_ID_              NVARCHAR(64),
    REMOVAL_TIME_           DATETIME2,
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_HI_BATCH (
    ID_                  NVARCHAR(64) NOT NULL,
    TYPE_                NVARCHAR(255),
    TOTAL_JOBS_          INT,
    JOBS_PER_SEED_       INT,
    INVOCATIONS_PER_JOB_ INT,
    SEED_JOB_DEF_ID_     NVARCHAR(64),
    MONITOR_JOB_DEF_ID_  NVARCHAR(64),
    BATCH_JOB_DEF_ID_    NVARCHAR(64),
    TENANT_ID_           NVARCHAR(64),
    CREATE_USER_ID_      NVARCHAR(255),
    START_TIME_          DATETIME2    NOT NULL,
    END_TIME_            DATETIME2,
    REMOVAL_TIME_        DATETIME2,
    PRIMARY KEY (ID_)
);

CREATE TABLE ACT_HI_EXT_TASK_LOG (
    ID_                NVARCHAR(64)   NOT NULL,
    TIMESTAMP_         DATETIME2      NOT NULL,
    EXT_TASK_ID_       NVARCHAR(64)   NOT NULL,
    RETRIES_           INTEGER,
    TOPIC_NAME_        NVARCHAR(255),
    WORKER_ID_         NVARCHAR(255),
    PRIORITY_          NUMERIC(19, 0) NOT NULL DEFAULT 0,
    ERROR_MSG_         NVARCHAR(4000),
    ERROR_DETAILS_ID_  NVARCHAR(64),
    ACT_ID_            NVARCHAR(255),
    ACT_INST_ID_       NVARCHAR(64),
    EXECUTION_ID_      NVARCHAR(64),
    ROOT_PROC_INST_ID_ NVARCHAR(64),
    PROC_INST_ID_      NVARCHAR(64),
    PROC_DEF_ID_       NVARCHAR(64),
    PROC_DEF_KEY_      NVARCHAR(255),
    TENANT_ID_         NVARCHAR(64),
    STATE_             INTEGER,
    REMOVAL_TIME_      DATETIME2,
    PRIMARY KEY (ID_)
);

CREATE INDEX ACT_IDX_HI_PRO_INST_END ON ACT_HI_PROCINST(END_TIME_);
CREATE INDEX ACT_IDX_HI_PRO_I_BUSKEY ON ACT_HI_PROCINST(BUSINESS_KEY_);
CREATE INDEX ACT_IDX_HI_PRO_INST_TENANT_ID ON ACT_HI_PROCINST(TENANT_ID_);
CREATE INDEX ACT_IDX_HI_PRO_INST_PROC_DEF_KEY ON ACT_HI_PROCINST(PROC_DEF_KEY_);
CREATE INDEX ACT_IDX_HI_PRO_INST_PROC_TIME ON ACT_HI_PROCINST(START_TIME_, END_TIME_);
CREATE INDEX ACT_IDX_HI_PI_PDEFID_END_TIME ON ACT_HI_PROCINST(PROC_DEF_ID_, END_TIME_);
CREATE INDEX ACT_IDX_HI_PRO_INST_ROOT_PI ON ACT_HI_PROCINST(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_PRO_INST_RM_TIME ON ACT_HI_PROCINST(REMOVAL_TIME_);

CREATE INDEX ACT_IDX_HI_ACTINST_ROOT_PI ON ACT_HI_ACTINST(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_ACT_INST_START ON ACT_HI_ACTINST(START_TIME_);
CREATE INDEX ACT_IDX_HI_ACT_INST_END ON ACT_HI_ACTINST(END_TIME_);
CREATE INDEX ACT_IDX_HI_ACT_INST_PROCINST ON ACT_HI_ACTINST(PROC_INST_ID_, ACT_ID_);
CREATE INDEX ACT_IDX_HI_ACT_INST_COMP ON ACT_HI_ACTINST(EXECUTION_ID_, ACT_ID_, END_TIME_, ID_);
CREATE INDEX ACT_IDX_HI_ACT_INST_STATS ON ACT_HI_ACTINST(PROC_DEF_ID_, PROC_INST_ID_, ACT_ID_, END_TIME_, ACT_INST_STATE_);
CREATE INDEX ACT_IDX_HI_ACT_INST_TENANT_ID ON ACT_HI_ACTINST(TENANT_ID_);
CREATE INDEX ACT_IDX_HI_ACT_INST_PROC_DEF_KEY ON ACT_HI_ACTINST(PROC_DEF_KEY_);
CREATE INDEX ACT_IDX_HI_AI_PDEFID_END_TIME ON ACT_HI_ACTINST(PROC_DEF_ID_, END_TIME_);
CREATE INDEX ACT_IDX_HI_ACT_INST_RM_TIME ON ACT_HI_ACTINST(REMOVAL_TIME_);

CREATE INDEX ACT_IDX_HI_TASKINST_ROOT_PI ON ACT_HI_TASKINST(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_TASK_INST_TENANT_ID ON ACT_HI_TASKINST(TENANT_ID_);
CREATE INDEX ACT_IDX_HI_TASK_INST_PROC_DEF_KEY ON ACT_HI_TASKINST(PROC_DEF_KEY_);
CREATE INDEX ACT_IDX_HI_TASKINST_PROCINST ON ACT_HI_TASKINST(PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_TASKINSTID_PROCINST ON ACT_HI_TASKINST(ID_, PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_TASK_INST_RM_TIME ON ACT_HI_TASKINST(REMOVAL_TIME_);
CREATE INDEX ACT_IDX_HI_TASK_INST_START ON ACT_HI_TASKINST(START_TIME_);
CREATE INDEX ACT_IDX_HI_TASK_INST_END ON ACT_HI_TASKINST(END_TIME_);

CREATE INDEX ACT_IDX_HI_IDENT_LNK_ROOT_PI ON ACT_HI_IDENTITYLINK(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_IDENT_LNK_USER ON ACT_HI_IDENTITYLINK(USER_ID_);
CREATE INDEX ACT_IDX_HI_IDENT_LNK_GROUP ON ACT_HI_IDENTITYLINK(GROUP_ID_);
CREATE INDEX ACT_IDX_HI_IDENT_LNK_TENANT_ID ON ACT_HI_IDENTITYLINK(TENANT_ID_);
CREATE INDEX ACT_IDX_HI_IDENT_LNK_PROC_DEF_KEY ON ACT_HI_IDENTITYLINK(PROC_DEF_KEY_);
CREATE INDEX ACT_IDX_HI_IDENT_LINK_TASK ON ACT_HI_IDENTITYLINK(TASK_ID_);
CREATE INDEX ACT_IDX_HI_IDENT_LINK_RM_TIME ON ACT_HI_IDENTITYLINK(REMOVAL_TIME_);

CREATE INDEX ACT_IDX_HI_DETAIL_ROOT_PI ON ACT_HI_DETAIL(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_DETAIL_PROC_INST ON ACT_HI_DETAIL(PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_DETAIL_ACT_INST ON ACT_HI_DETAIL(ACT_INST_ID_);
CREATE INDEX ACT_IDX_HI_DETAIL_CASE_INST ON ACT_HI_DETAIL(CASE_INST_ID_);
CREATE INDEX ACT_IDX_HI_DETAIL_CASE_EXEC ON ACT_HI_DETAIL(CASE_EXECUTION_ID_);
CREATE INDEX ACT_IDX_HI_DETAIL_TIME ON ACT_HI_DETAIL(TIME_);
CREATE INDEX ACT_IDX_HI_DETAIL_NAME ON ACT_HI_DETAIL(NAME_);
CREATE INDEX ACT_IDX_HI_DETAIL_TASK_ID ON ACT_HI_DETAIL(TASK_ID_);
CREATE INDEX ACT_IDX_HI_DETAIL_TENANT_ID ON ACT_HI_DETAIL(TENANT_ID_);
CREATE INDEX ACT_IDX_HI_DETAIL_PROC_DEF_KEY ON ACT_HI_DETAIL(PROC_DEF_KEY_);
CREATE INDEX ACT_IDX_HI_DETAIL_BYTEAR ON ACT_HI_DETAIL(BYTEARRAY_ID_);
CREATE INDEX ACT_IDX_HI_DETAIL_RM_TIME ON ACT_HI_DETAIL(REMOVAL_TIME_);
CREATE INDEX ACT_IDX_HI_DETAIL_TASK_BYTEAR ON ACT_HI_DETAIL(BYTEARRAY_ID_, TASK_ID_);

CREATE INDEX ACT_IDX_HI_VARINST_ROOT_PI ON ACT_HI_VARINST(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_PROCVAR_PROC_INST ON ACT_HI_VARINST(PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_PROCVAR_NAME_TYPE ON ACT_HI_VARINST(NAME_, VAR_TYPE_);
CREATE INDEX ACT_IDX_HI_CASEVAR_CASE_INST ON ACT_HI_VARINST(CASE_INST_ID_);
CREATE INDEX ACT_IDX_HI_VAR_INST_TENANT_ID ON ACT_HI_VARINST(TENANT_ID_);
CREATE INDEX ACT_IDX_HI_VAR_INST_PROC_DEF_KEY ON ACT_HI_VARINST(PROC_DEF_KEY_);
CREATE INDEX ACT_IDX_HI_VARINST_BYTEAR ON ACT_HI_VARINST(BYTEARRAY_ID_);
CREATE INDEX ACT_IDX_HI_VARINST_RM_TIME ON ACT_HI_VARINST(REMOVAL_TIME_);

CREATE INDEX ACT_IDX_HI_INCIDENT_TENANT_ID ON ACT_HI_INCIDENT(TENANT_ID_);
CREATE INDEX ACT_IDX_HI_INCIDENT_PROC_DEF_KEY ON ACT_HI_INCIDENT(PROC_DEF_KEY_);
CREATE INDEX ACT_IDX_HI_INCIDENT_ROOT_PI ON ACT_HI_INCIDENT(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_INCIDENT_PROCINST ON ACT_HI_INCIDENT(PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_INCIDENT_RM_TIME ON ACT_HI_INCIDENT(REMOVAL_TIME_);

CREATE INDEX ACT_IDX_HI_JOB_LOG_ROOT_PI ON ACT_HI_JOB_LOG(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_JOB_LOG_PROCINST ON ACT_HI_JOB_LOG(PROCESS_INSTANCE_ID_);
CREATE INDEX ACT_IDX_HI_JOB_LOG_PROCDEF ON ACT_HI_JOB_LOG(PROCESS_DEF_ID_);
CREATE INDEX ACT_IDX_HI_JOB_LOG_TENANT_ID ON ACT_HI_JOB_LOG(TENANT_ID_);
CREATE INDEX ACT_IDX_HI_JOB_LOG_JOB_DEF_ID ON ACT_HI_JOB_LOG(JOB_DEF_ID_);
CREATE INDEX ACT_IDX_HI_JOB_LOG_PROC_DEF_KEY ON ACT_HI_JOB_LOG(PROCESS_DEF_KEY_);
CREATE INDEX ACT_IDX_HI_JOB_LOG_EX_STACK ON ACT_HI_JOB_LOG(JOB_EXCEPTION_STACK_ID_);
CREATE INDEX ACT_IDX_HI_JOB_LOG_RM_TIME ON ACT_HI_JOB_LOG(REMOVAL_TIME_);

CREATE INDEX ACT_HI_BAT_RM_TIME ON ACT_HI_BATCH(REMOVAL_TIME_);

CREATE INDEX ACT_HI_EXT_TASK_LOG_ROOT_PI ON ACT_HI_EXT_TASK_LOG(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_HI_EXT_TASK_LOG_PROCINST ON ACT_HI_EXT_TASK_LOG(PROC_INST_ID_);
CREATE INDEX ACT_HI_EXT_TASK_LOG_PROCDEF ON ACT_HI_EXT_TASK_LOG(PROC_DEF_ID_);
CREATE INDEX ACT_HI_EXT_TASK_LOG_PROC_DEF_KEY ON ACT_HI_EXT_TASK_LOG(PROC_DEF_KEY_);
CREATE INDEX ACT_HI_EXT_TASK_LOG_TENANT_ID ON ACT_HI_EXT_TASK_LOG(TENANT_ID_);
CREATE INDEX ACT_IDX_HI_EXTTASKLOG_ERRORDET ON ACT_HI_EXT_TASK_LOG(ERROR_DETAILS_ID_);
CREATE INDEX ACT_HI_EXT_TASK_LOG_RM_TIME ON ACT_HI_EXT_TASK_LOG(REMOVAL_TIME_);

CREATE INDEX ACT_IDX_HI_OP_LOG_ROOT_PI ON ACT_HI_OP_LOG(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_OP_LOG_PROCINST ON ACT_HI_OP_LOG(PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_OP_LOG_PROCDEF ON ACT_HI_OP_LOG(PROC_DEF_ID_);
CREATE INDEX ACT_IDX_HI_OP_LOG_TASK ON ACT_HI_OP_LOG(TASK_ID_);
CREATE INDEX ACT_IDX_HI_OP_LOG_RM_TIME ON ACT_HI_OP_LOG(REMOVAL_TIME_);
CREATE INDEX ACT_IDX_HI_OP_LOG_TIMESTAMP ON ACT_HI_OP_LOG(TIMESTAMP_);

CREATE INDEX ACT_IDX_HI_COMMENT_TASK ON ACT_HI_COMMENT(TASK_ID_);
CREATE INDEX ACT_IDX_HI_COMMENT_ROOT_PI ON ACT_HI_COMMENT(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_COMMENT_PROCINST ON ACT_HI_COMMENT(PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_COMMENT_RM_TIME ON ACT_HI_COMMENT(REMOVAL_TIME_);

CREATE INDEX ACT_IDX_HI_ATTACHMENT_CONTENT ON ACT_HI_ATTACHMENT(CONTENT_ID_);
CREATE INDEX ACT_IDX_HI_ATTACHMENT_ROOT_PI ON ACT_HI_ATTACHMENT(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_ATTACHMENT_PROCINST ON ACT_HI_ATTACHMENT(PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_ATTACHMENT_TASK ON ACT_HI_ATTACHMENT(TASK_ID_);
CREATE INDEX ACT_IDX_HI_ATTACHMENT_RM_TIME ON ACT_HI_ATTACHMENT(REMOVAL_TIME_);
--
-- Copyright Â© 2012 - 2018 camunda services GmbH and various authors (info@camunda.com)
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--

CREATE TABLE ACT_HI_CASEINST (
    ID_                        NVARCHAR(64) NOT NULL,
    CASE_INST_ID_              NVARCHAR(64) NOT NULL,
    BUSINESS_KEY_              NVARCHAR(255),
    CASE_DEF_ID_               NVARCHAR(64) NOT NULL,
    CREATE_TIME_               DATETIME2    NOT NULL,
    CLOSE_TIME_                DATETIME2,
    DURATION_                  NUMERIC(19, 0),
    STATE_                     TINYINT,
    CREATE_USER_ID_            NVARCHAR(255),
    SUPER_CASE_INSTANCE_ID_    NVARCHAR(64),
    SUPER_PROCESS_INSTANCE_ID_ NVARCHAR(64),
    TENANT_ID_                 NVARCHAR(64),
    PRIMARY KEY (ID_),
    UNIQUE (CASE_INST_ID_)
);

CREATE TABLE ACT_HI_CASEACTINST (
    ID_                 NVARCHAR(64)  NOT NULL,
    PARENT_ACT_INST_ID_ NVARCHAR(64),
    CASE_DEF_ID_        NVARCHAR(64)  NOT NULL,
    CASE_INST_ID_       NVARCHAR(64)  NOT NULL,
    CASE_ACT_ID_        NVARCHAR(255) NOT NULL,
    TASK_ID_            NVARCHAR(64),
    CALL_PROC_INST_ID_  NVARCHAR(64),
    CALL_CASE_INST_ID_  NVARCHAR(64),
    CASE_ACT_NAME_      NVARCHAR(255),
    CASE_ACT_TYPE_      NVARCHAR(255),
    CREATE_TIME_        DATETIME2     NOT NULL,
    END_TIME_           DATETIME2,
    DURATION_           NUMERIC(19, 0),
    STATE_              TINYINT,
    REQUIRED_           TINYINT,
    TENANT_ID_          NVARCHAR(64),
    PRIMARY KEY (ID_)
);

CREATE INDEX ACT_IDX_HI_CAS_I_CLOSE ON ACT_HI_CASEINST(CLOSE_TIME_);
CREATE INDEX ACT_IDX_HI_CAS_I_BUSKEY ON ACT_HI_CASEINST(BUSINESS_KEY_);
CREATE INDEX ACT_IDX_HI_CAS_I_TENANT_ID ON ACT_HI_CASEINST(TENANT_ID_);
CREATE INDEX ACT_IDX_HI_CAS_A_I_CREATE ON ACT_HI_CASEACTINST(CREATE_TIME_);
CREATE INDEX ACT_IDX_HI_CAS_A_I_END ON ACT_HI_CASEACTINST(END_TIME_);
CREATE INDEX ACT_IDX_HI_CAS_A_I_COMP ON ACT_HI_CASEACTINST(CASE_ACT_ID_, END_TIME_, ID_);
CREATE INDEX ACT_IDX_HI_CAS_A_I_TENANT_ID ON ACT_HI_CASEACTINST(TENANT_ID_);
--
-- Copyright Â© 2012 - 2018 camunda services GmbH and various authors (info@camunda.com)
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--

-- create history decision instance table --
CREATE TABLE ACT_HI_DECINST (
    ID_                NVARCHAR(64)  NOT NULL,
    DEC_DEF_ID_        NVARCHAR(64)  NOT NULL,
    DEC_DEF_KEY_       NVARCHAR(255) NOT NULL,
    DEC_DEF_NAME_      NVARCHAR(255),
    PROC_DEF_KEY_      NVARCHAR(255),
    PROC_DEF_ID_       NVARCHAR(64),
    PROC_INST_ID_      NVARCHAR(64),
    CASE_DEF_KEY_      NVARCHAR(255),
    CASE_DEF_ID_       NVARCHAR(64),
    CASE_INST_ID_      NVARCHAR(64),
    ACT_INST_ID_       NVARCHAR(64),
    ACT_ID_            NVARCHAR(255),
    EVAL_TIME_         DATETIME2     NOT NULL,
    REMOVAL_TIME_      DATETIME2,
    COLLECT_VALUE_     DOUBLE PRECISION,
    USER_ID_           NVARCHAR(255),
    ROOT_DEC_INST_ID_  NVARCHAR(64),
    ROOT_PROC_INST_ID_ NVARCHAR(64),
    DEC_REQ_ID_        NVARCHAR(64),
    DEC_REQ_KEY_       NVARCHAR(255),
    TENANT_ID_         NVARCHAR(64),
    PRIMARY KEY (ID_)
);

-- create history decision input table --
CREATE TABLE ACT_HI_DEC_IN (
    ID_                NVARCHAR(64) NOT NULL,
    DEC_INST_ID_       NVARCHAR(64) NOT NULL,
    CLAUSE_ID_         NVARCHAR(64),
    CLAUSE_NAME_       NVARCHAR(255),
    VAR_TYPE_          NVARCHAR(100),
    BYTEARRAY_ID_      NVARCHAR(64),
    DOUBLE_            DOUBLE PRECISION,
    LONG_              NUMERIC(19, 0),
    TEXT_              NVARCHAR(4000),
    TEXT2_             NVARCHAR(4000),
    TENANT_ID_         NVARCHAR(64),
    CREATE_TIME_       DATETIME2,
    ROOT_PROC_INST_ID_ NVARCHAR(64),
    REMOVAL_TIME_      DATETIME2,
    PRIMARY KEY (ID_)
);

-- create history decision output table --
CREATE TABLE ACT_HI_DEC_OUT (
    ID_                NVARCHAR(64) NOT NULL,
    DEC_INST_ID_       NVARCHAR(64) NOT NULL,
    CLAUSE_ID_         NVARCHAR(64),
    CLAUSE_NAME_       NVARCHAR(255),
    RULE_ID_           NVARCHAR(64),
    RULE_ORDER_        INT,
    VAR_NAME_          NVARCHAR(255),
    VAR_TYPE_          NVARCHAR(100),
    BYTEARRAY_ID_      NVARCHAR(64),
    DOUBLE_            DOUBLE PRECISION,
    LONG_              NUMERIC(19, 0),
    TEXT_              NVARCHAR(4000),
    TEXT2_             NVARCHAR(4000),
    TENANT_ID_         NVARCHAR(64),
    CREATE_TIME_       DATETIME2,
    ROOT_PROC_INST_ID_ NVARCHAR(64),
    REMOVAL_TIME_      DATETIME2,
    PRIMARY KEY (ID_)
);


CREATE INDEX ACT_IDX_HI_DEC_INST_ID ON ACT_HI_DECINST(DEC_DEF_ID_);
CREATE INDEX ACT_IDX_HI_DEC_INST_KEY ON ACT_HI_DECINST(DEC_DEF_KEY_);
CREATE INDEX ACT_IDX_HI_DEC_INST_PI ON ACT_HI_DECINST(PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_DEC_INST_CI ON ACT_HI_DECINST(CASE_INST_ID_);
CREATE INDEX ACT_IDX_HI_DEC_INST_ACT ON ACT_HI_DECINST(ACT_ID_);
CREATE INDEX ACT_IDX_HI_DEC_INST_ACT_INST ON ACT_HI_DECINST(ACT_INST_ID_);
CREATE INDEX ACT_IDX_HI_DEC_INST_TIME ON ACT_HI_DECINST(EVAL_TIME_);
CREATE INDEX ACT_IDX_HI_DEC_INST_TENANT_ID ON ACT_HI_DECINST(TENANT_ID_);
CREATE INDEX ACT_IDX_HI_DEC_INST_ROOT_ID ON ACT_HI_DECINST(ROOT_DEC_INST_ID_);
CREATE INDEX ACT_IDX_HI_DEC_INST_REQ_ID ON ACT_HI_DECINST(DEC_REQ_ID_);
CREATE INDEX ACT_IDX_HI_DEC_INST_REQ_KEY ON ACT_HI_DECINST(DEC_REQ_KEY_);
CREATE INDEX ACT_IDX_HI_DEC_INST_ROOT_PI ON ACT_HI_DECINST(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_DEC_INST_RM_TIME ON ACT_HI_DECINST(REMOVAL_TIME_);

CREATE INDEX ACT_IDX_HI_DEC_IN_INST ON ACT_HI_DEC_IN(DEC_INST_ID_);
CREATE INDEX ACT_IDX_HI_DEC_IN_CLAUSE ON ACT_HI_DEC_IN(DEC_INST_ID_, CLAUSE_ID_);
CREATE INDEX ACT_IDX_HI_DEC_IN_ROOT_PI ON ACT_HI_DEC_IN(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_DEC_IN_RM_TIME ON ACT_HI_DEC_IN(REMOVAL_TIME_);

CREATE INDEX ACT_IDX_HI_DEC_OUT_INST ON ACT_HI_DEC_OUT(DEC_INST_ID_);
CREATE INDEX ACT_IDX_HI_DEC_OUT_RULE ON ACT_HI_DEC_OUT(RULE_ORDER_, CLAUSE_ID_);
CREATE INDEX ACT_IDX_HI_DEC_OUT_ROOT_PI ON ACT_HI_DEC_OUT(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_HI_DEC_OUT_RM_TIME ON ACT_HI_DEC_OUT(REMOVAL_TIME_);
